% Austin Charles Stone
% Programming Languages Honors Homework 3 - A Parser and Evaluator for a Simple Language 
% EID: as46569
% October 2nd 2014


%---['var',x,';',x,':=',1,';','if','(',x,'<',0,')','then',x,':=',10,'.','else',x,':=',20,'.','endif',';',return,x,'.']----
%---[function,f,'(',x,')','{',return,x,'.','}',';',return,f,'(','(',10,+,1,')',')','.']

%---- Loop ----
loop(loop(Condition, StatementSeq))-->['while'],['('],con(Condition),[')'],['do'],stmntSeq(StatementSeq),['done'].


%---- Function Declaration ----
funcDecl(functionDeclaration(IdFunctionName, IdParam, Body)) --> ['function'],[IdFunctionName],['('],[IdParam],[')'],['{'],prog(Body),['}'],{isVariable(IdParam), isVariable(IdFunctionName)}.

%---- statement ::= declaration | assignment | conditional | loop ----
stmnt(statement(S))-->condit(S).
stmnt(statement(S))-->decl(S).
stmnt(statement(S))-->assign(S).
stmnt(statement(S))-->loop(S).

%---- conditional ----
condit(conditional(Condition, Statement1, Statement2))-->['if'],['('],con(Condition),[')'],['then'],stmntSeq(Statement1),['else'],stmntSeq(Statement2),['endif'].


%---- statementSeq ::= statement ’.’ | statement ’;’ statementSeq ----
stmntSeq(statementSeq(S))--> stmnt(S),['.'].
stmntSeq(statementSeq(First, Remainder))-->stmnt(First),[';'],stmntSeq(Remainder).

%---- condition ::= base comp base ----
con(condition(Base1, Comparator, Base2))-->base(Base1),comp(Comparator),base(Base2).

%---- funcCall ::= < id > ’(’ base ’)’ ----
funcCall(functionCall(FunctionId, Base))-->[FunctionId],['('],base(Base),[')'],{isVariable(FunctionId)}.

%---- comp ::= ’==’ | ’<’ | ’>’ | ’<=’ | ’>=’ | ’! =’ ----
comp(comparator(C))-->[C], {isComparator(C)}.
isComparator('==').
isComparator('<').
isComparator('>').
isComparator('<=').
isComparator('>=').
isComparator('!=').



% ---- Parse for API ----
parse(TokenList, AST):-prog(AST, TokenList, []).

% ---- Return ---- 
prog(NextSegment)-->[return],ret(NextSegment),['.'].

% ---- Statement ---- 
prog((NextSegment,Remainder))-->stmnt(NextSegment),[';'],prog(Remainder).

%---- Function Declaration ----
prog((FunctionDeclaration,Remainder))-->funcDecl(FunctionDeclaration),[';'],prog(Remainder). 

%--- Statement ----
prog((Statement,Remainder))-->stmnt(Statement),[';'],prog(Remainder).

% ---- Assignment ----
prog((NextSegment,Remainder))-->assign(NextSegment),[';'],prog(Remainder).

% ---- Return Helper ----
ret(return(Term))-->term(Term).

% ---- Declaration Helper ----
decl(declare(D))-->['var'],[D],{isVariable(D)}. 

% ---- Assignment Helper ----
assign(assignment(Id, Value))-->[Id],[:=],base(Value),{isVariable(Id)}.

% ---- Base ----
base(Base) --> ['('],expr(Base),[')'].%,{write('base expression'),write(E),nl}.
base(float(Int)) --> [Int],{integer(Int)}.     
base(float(Float)) --> [Float],{float(Float)}.
base(id(Id)) --> [Id],{isVariable(Id)}.
base(F)-->funcCall(F).

% ---- Factor ----
factor(Factor) --> base(Factor).                           %, {write(B), write(' factor(B)-->base(B)'),nl}.

% ---- Check if variable name ----
isVariable(Id) :- not(reservedWord(Id)),not(float(Id)),not(integer(Id)).

% ---- Expression Handling ----
expr(E) --> term(E).%,{write('expr term '),write(E),nl}.                                   %,{write(E),write(' expr(E) --> term(E)'),nl}.
expr(E) --> term(Term),[-],leftAssoc(E,Term,minus).%,{write(leftAssoc(E,Term,minus)),write('expr minus expr(E)-->term(Term),[-],leftAssoc(E,Term,minus)'),nl}.
expr(E) --> term(Term),[+],leftAssoc(E,Term,plus).%,{write(leftAssoc(E,Term,plus)),write('expr plus expr(E) --> term(Term),[+],leftAssoc(E,Term,plus)'),nl}.

% ---- Term ---- 
term(Term) --> factor(Term).                           %,{write(Term),write(' term(Term)-->factor(Term)'),nl}.
term(Term) --> factor(Factor),[*],leftAssoc(Term,Factor,multiply).
term(Term) --> factor(Factor), [/], leftAssoc(Term,Factor,divide).

% ---- Reserved Words ----
reservedWord(+).
reservedWord(-).
reservedWord(*).
reservedWord(/).

%---- Outer Cases -----
leftAssoc(expression(minus,Term,Term1),Term,minus) --> term(Term1).%,{write(checkNextLine),nl,write(expression(minus,Term,Term1)),nl}.
leftAssoc(expression(plus,Term,Term1),Term,plus) --> term(Term1).%,{write(checkNextLine),nl,write(expression(plus,Term,Term1)),nl}.
leftAssoc(expression(multiply,Term,Factor1),Term,multiply) --> factor(Factor1).
leftAssoc(expression(divide,Term,Factor1),Term,divide) --> factor(Factor1).

% ---- Divide And Multiply Handling ----
leftAssoc(Term,Factor,multiply) --> factor(Factor1), [/], leftAssoc(Term,expression(multiply,Factor,Factor1),divide).
leftAssoc(Term,Factor,multiply) --> factor(Factor1), [*], leftAssoc(Term,expression(multiply,Factor,Factor1),multiply).
leftAssoc(Term,Factor,divide) --> factor(Factor1), [/], leftAssoc(Term,expression(divide,Factor,Factor1) ,divide).
leftAssoc(Term,Factor,divide) --> factor(Factor1), [*], leftAssoc(Term,expression(divide,Factor,Factor1) ,multiply).

% ---- Minus And Plus Handling ----
leftAssoc(E,Term,plus) -->term(Term1),[-],leftAssoc(E,expression(plus,Term,Term1),minus).
leftAssoc(E,Term,minus) -->term(Term1),[-],leftAssoc(E,expression(minus,Term,Term1),minus).
leftAssoc(E,Term,minus) -->term(Term1),[+],leftAssoc(E,expression(minus,Term,Term1),plus).
leftAssoc(E,Term,plus)--> term(Term1),[+],leftAssoc(E,expression(plus,Term,Term1),plus).           %,{write(expression(plus,Term,Term1)),nl}.




%---------------------------------------------------- EVALUATE LOGIC -------------------------------------------------------


% --- get association list for function (potentially a nested function) ----
getVariableFromOuterScope([VariableAssoc|Rest], VariableValue, VariableName):-is_assoc(VariableAssoc),get_assoc(VariableName, VariableAssoc, VariableValue).
getVariableFromOuterScope([VariableAssoc|Rest], VariableValue, VariableName):-getVariableFromOuterScope(Rest, VariableValue, VariableName).
   

evalTerm(float(T), Number, FunctionAssoc, [VariableAssoc|Tail]):-is_assoc(FunctionAssoc), is_assoc(VariableAssoc),Number is T.
evalTerm(expression(Op, Term1, Term2), Number, FunctionAssoc, [VariableAssoc|Tail]):-is_assoc(FunctionAssoc),is_assoc(VariableAssoc),evalExpression(Op, Term1, Term2, FunctionAssoc, [VariableAssoc|Tail], Number). 

evalTerm(id(Var), Number, FunctionAssoc, [VariableAssoc|Tail]):-is_assoc(FunctionAssoc),is_assoc(VariableAssoc), getVariableFromOuterScope([VariableAssoc|Tail], Number1, Var), (integer(Number1);float(Number1)),Number is Number1.

%---- evaluate function ---- 

evalTerm(functionCall(FunctionName, Term), Number, FunctionAssoc, [VariableAssoc|Tail]):-is_assoc(FunctionAssoc), is_assoc(VariableAssoc),
evalTerm(Term, ValueOfArgument, FunctionAssoc, [VariableAssoc|Tail]), 
get_assoc(FunctionName,FunctionAssoc,Function),
callFunction(Function, FunctionAssoc, [VariableAssoc|Tail], ValueOfArgument, Number).

%---- call function ----
callFunction(functionDeclaration(FunctionName, Parameter, Body), FunctionAssoc, [VariableAssoc|Tail], ValueOfArgument, Output):-
is_assoc(NewFunctionVariableAssoc),
put_assoc(Parameter, NewFunctionVariableAssoc, ValueOfArgument, TempVariableAssoc),
append([TempVariableAssoc], [VariableAssoc|Tail], NewVariableAssoc),
evaluate(Body,Output,FunctionAssoc, NewVariableAssoc).

% ---- evaluate expression ----
evalExpression(plus, Term1, Term2, FunctionAssoc, [VariableAssoc|Tail], Number):-
evalTerm(Term1, Number1, 
FunctionAssoc,[VariableAssoc|Tail]), 
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]),
Number is Number1 + Number2.

evalExpression(minus, Term1, Term2, FunctionAssoc, [VariableAssoc|Tail], Number):-
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]),
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]),
Number is Number1 - Number2.

evalExpression(multiply, Term1, Term2, FunctionAssoc, [VariableAssoc|Tail], Number):-
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]), evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]), 
Number is Number1 * Number2.

evalExpression(divide, Term1, Term2, FunctionAssoc, [VariableAssoc|Tail], Number):-
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]),
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]),
Number is Number1 / Number2.


%---- function declaration ----

evaluate(functionDeclaration(FunctionName, Parameter, Body), FunctionAssoc, [VariableAssoc|Tail], NewFunctionAssoc, [VariableAssoc|Tail]):-
is_assoc(FunctionAssoc),
is_assoc(VariableAssoc),
\+get_assoc(FunctionName,FunctionAssoc,_),
put_assoc(FunctionName, FunctionAssoc, functionDeclaration(FunctionName, Parameter, Body), NewFunctionAssoc).

% ---- evaluate conditional ---- 

evaluate(statement(conditional(condition(Term1, comparator(Comparator), Term2), SSConditionSatisfied, SSElse)), FunctionAssoc, [VariableAssoc|Tail],FunctionAssoc, NewVariableAssoc):-
is_assoc(FunctionAssoc),
is_assoc(VariableAssoc),
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]),
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]), 
((conditionalSatisfied(Comparator, Number1, Number2), 
evaluate(SSConditionSatisfied, FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc));
(
\+ conditionalSatisfied(Comparator, Number1, Number2), 
evaluate(SSElse, FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc)
)).

% ---- loop ----

evaluate(statement(loop(condition(Term1, comparator(Comparator), Term2), SS)), FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc):-
is_assoc(FunctionAssoc),is_assoc(VariableAssoc),
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]),
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]), 
conditionalSatisfied(Comparator, Number1, Number2), 
evaluate(SS, FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, TempVariableAssoc), 
evaluate(statement(loop(condition(Term1, comparator(Comparator), Term2), SS)),FunctionAssoc, TempVariableAssoc, FunctionAssoc, NewVariableAssoc).

% ---- loop termination ----

evaluate(statement(loop(condition(Term1, comparator(Comparator), Term2), SS)), FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, [VariableAssoc|Tail]):-
is_assoc(FunctionAssoc),
is_assoc(VariableAssoc),
evalTerm(Term1, Number1, FunctionAssoc, [VariableAssoc|Tail]),
evalTerm(Term2, Number2, FunctionAssoc, [VariableAssoc|Tail]),
\+ conditionalSatisfied(Comparator, Number1, Number2).


% ---- statementSeq ----

evaluate(statementSeq(S1,S2),FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc):-
evaluate(S1,
FunctionAssoc,
[VariableAssoc|Tail],
FunctionAssoc, 
NewVariableAssocTemp), 
evaluate(S2,
FunctionAssoc,
NewVariableAssocTemp,
FunctionAssoc,
NewVariableAssoc).

evaluate(statementSeq(S1),FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc):-
evaluate(S1,
FunctionAssoc,
[VariableAssoc|Tail],
FunctionAssoc, 
NewVariableAssoc).

% ---- check conditional ----

conditionalSatisfied(==, Number1, Number2):-Number1'=:='Number2.
conditionalSatisfied(<, Number1, Number2):-Number1'<'Number2.
conditionalSatisfied(>, Number1, Number2):-Number1'>'Number2.
conditionalSatisfied(<=, Number1, Number2):-Number1'=<'Number2.
conditionalSatisfied(>=, Number1, Number2):-Number1'>='Number2.
conditionalSatisfied('!=', Number1, Number2):-Number1=\=Number2.


% ---- assignment ----

evaluate(statement(assignment(Var,Term)),FunctionAssoc,[VariableAssoc|Tail],FunctionAssoc, NewVariableAssoc):-
is_assoc(FunctionAssoc),
is_assoc(VariableAssoc),
getVariableFromOuterScope([VariableAssoc|Tail], VariableValue, Var),
evalTerm(Term, Number,FunctionAssoc,[VariableAssoc|Tail]),
put_assoc(Var, VariableAssoc, Number, NewVariableAssocTemp),
append([NewVariableAssocTemp],Tail,NewVariableAssoc).

% ---- return ----

evaluate(return(Term),Number, FunctionAssoc, [VariableAssoc|Tail]):-is_assoc(VariableAssoc),is_assoc(FunctionAssoc),evalTerm(Term, Number, FunctionAssoc, [VariableAssoc|Tail]).

% ---- new variable declared ----

evaluate(statement(declare(Var)), FunctionAssoc, [VariableAssoc|Tail], FunctionAssoc, NewVariableAssoc):-
is_assoc(VariableAssoc),
is_assoc(FunctionAssoc),
\+get_assoc(Var, VariableAssoc, _),
put_assoc(Var, VariableAssoc, [null], NewVariableAssocTemp),
append([NewVariableAssocTemp],Tail,NewVariableAssoc).


% ---- driving recursion ----

evaluate((H,T), Number, FunctionAssoc, [VariableAssoc|Tail]):-evaluate(H, FunctionAssoc, [VariableAssoc|Tail], NewFunctionAssoc, NewVariableAssoc),evaluate(T,Number, NewFunctionAssoc, NewVariableAssoc).


% ---- driving recursion for statement sequences 

evaluate((H,T), FunctionAssoc, [VariableAssoc|Tail], NewFunctionAssoc, NewVariableAssoc):-evaluate(H, FunctionAssoc, [VariableAssoc|Tail], NewFunctionAssoc, NewVariableAssoc),evaluate(T, NewFunctionAssoc, NewVariableAssoc).

% ---- evaluate for API ----
evaluate(AST, Number):-is_assoc(Tail),is_assoc(VariableAssoc),evaluate(AST, Number, FunctionAssoc, [VariableAssoc|Tail]).

